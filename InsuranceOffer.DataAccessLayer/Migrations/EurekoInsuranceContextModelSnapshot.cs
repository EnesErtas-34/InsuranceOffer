// <auto-generated />
using System;
using InsuranceOffer.DataAccessLayer.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InsuranceOffer.DataAccessLayer.Migrations
{
    [DbContext(typeof(EurekoInsuranceContext))]
    partial class EurekoInsuranceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InsuranceOffer.EntityLayer.Concrete.Assurance", b =>
                {
                    b.Property<Guid>("AssuranceCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isRequired")
                        .HasColumnType("bit");

                    b.HasKey("AssuranceCode");

                    b.ToTable("Assurances");
                });

            modelBuilder.Entity("InsuranceOffer.EntityLayer.Concrete.Insured", b =>
                {
                    b.Property<int>("InsuredID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InsuredID"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InsuredID");

                    b.ToTable("Insureds");
                });

            modelBuilder.Entity("InsuranceOffer.EntityLayer.Concrete.Pay", b =>
                {
                    b.Property<int>("PayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayID"));

                    b.Property<int>("CVC")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsuredID")
                        .HasColumnType("int");

                    b.Property<long>("KartNo")
                        .HasColumnType("bigint");

                    b.Property<int>("PolicyID")
                        .HasColumnType("int");

                    b.HasKey("PayID");

                    b.HasIndex("InsuredID");

                    b.HasIndex("PolicyID")
                        .IsUnique();

                    b.ToTable("Pays");
                });

            modelBuilder.Entity("InsuranceOffer.EntityLayer.Concrete.PoliceAssurance", b =>
                {
                    b.Property<int>("PoliceAssuranceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PoliceAssuranceID"));

                    b.Property<Guid>("AssuranceCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Bedel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PolicyID")
                        .HasColumnType("int");

                    b.HasKey("PoliceAssuranceID");

                    b.HasIndex("AssuranceCode");

                    b.HasIndex("PolicyID");

                    b.ToTable("PoliceAssurances");
                });

            modelBuilder.Entity("InsuranceOffer.EntityLayer.Concrete.Policy", b =>
                {
                    b.Property<int>("PolicyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyID"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InsuredID")
                        .HasColumnType("int");

                    b.Property<int>("InsurerID")
                        .HasColumnType("int");

                    b.Property<bool>("Offer")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PolicyID");

                    b.HasIndex("InsuredID");

                    b.HasIndex("InsurerID");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("InsuranceOffer.EntityLayer.Concrete.VerificationCodes", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.HasKey("PhoneNumber");

                    b.ToTable("VerificationCodes");
                });

            modelBuilder.Entity("InsuranceOffer.EntityLayer.Concrete.Pay", b =>
                {
                    b.HasOne("InsuranceOffer.EntityLayer.Concrete.Insured", "Insured")
                        .WithMany("Pays")
                        .HasForeignKey("InsuredID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceOffer.EntityLayer.Concrete.Policy", "Policy")
                        .WithOne("Pay")
                        .HasForeignKey("InsuranceOffer.EntityLayer.Concrete.Pay", "PolicyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insured");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("InsuranceOffer.EntityLayer.Concrete.PoliceAssurance", b =>
                {
                    b.HasOne("InsuranceOffer.EntityLayer.Concrete.Assurance", "Assurance")
                        .WithMany("PoliceTeminats")
                        .HasForeignKey("AssuranceCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InsuranceOffer.EntityLayer.Concrete.Policy", "Policy")
                        .WithMany("PoliceAssurances")
                        .HasForeignKey("PolicyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assurance");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("InsuranceOffer.EntityLayer.Concrete.Policy", b =>
                {
                    b.HasOne("InsuranceOffer.EntityLayer.Concrete.Insured", "InsuredNo")
                        .WithMany("PoliciesAsInsured")
                        .HasForeignKey("InsuredID")
                        .IsRequired();

                    b.HasOne("InsuranceOffer.EntityLayer.Concrete.Insured", "InsurerNo")
                        .WithMany("PoliciesAsInsurer")
                        .HasForeignKey("InsurerID")
                        .IsRequired();

                    b.Navigation("InsuredNo");

                    b.Navigation("InsurerNo");
                });

            modelBuilder.Entity("InsuranceOffer.EntityLayer.Concrete.Assurance", b =>
                {
                    b.Navigation("PoliceTeminats");
                });

            modelBuilder.Entity("InsuranceOffer.EntityLayer.Concrete.Insured", b =>
                {
                    b.Navigation("Pays");

                    b.Navigation("PoliciesAsInsured");

                    b.Navigation("PoliciesAsInsurer");
                });

            modelBuilder.Entity("InsuranceOffer.EntityLayer.Concrete.Policy", b =>
                {
                    b.Navigation("Pay")
                        .IsRequired();

                    b.Navigation("PoliceAssurances");
                });
#pragma warning restore 612, 618
        }
    }
}
